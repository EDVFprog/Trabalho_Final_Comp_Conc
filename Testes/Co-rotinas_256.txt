Corrotinas são estruturas de programação que permitem a execução cooperativa de funções, facilitando a criação de fluxos de execução que podem ser pausados e retomados, mas que não funcionam exatamente como threads. Elas são usadas principalmente para organizar e gerenciar a execução de tarefas assíncronas sem bloquear o fluxo principal do programa, uma técnica útil especialmente em operações de I/O, como acesso a redes e a arquivos. O conceito de co-rotinas apareceu como uma construção de linguagem de programação durante 70.

Diferente das threads, que executam em paralelo (ou de forma pseudo-paralela em sistemas single-core), corrotinas realizam uma alternância de controle voluntária. Ou seja, elas pausam em pontos específicos e transferem o controle para outra parte do código, permitindo que outras corrotinas executem enquanto aguardam. Esse modelo facilita o uso de memória e processamento, já que as corrotinas não exigem a criação de múltiplas pilhas de execução e compartilham o mesmo contexto.

Em Python, por exemplo, corrotinas são implementadas com as palavras-chave `async` e `await`. Quando uma função assíncrona encontra uma operação que pode demorar (como uma requisição de rede), ela cede temporariamente o controle com `await`, permitindo que outras partes do programa executem até que a operação seja concluída. Assim, corrotinas tornam o código assíncrono mais organizado e legível.

Em comparação com threads, corrotinas são menos complexas de gerenciar, pois não exigem locks para proteger recursos compartilhados. No entanto, como não funcionam em paralelo, não são ideais para tarefas que exigem processamento intensivo em CPU, sendo mais adequadas para I/O e multitarefa leve.
